- matches = get_matches(@tournament)
- players = get_players(@tournament)
- first_round_left_range = 0..7
- second_round_left_range = 8..11
- sm_final_range = 12..13
- final = 14

= render "_header.html", tournament: @tournament, time: @time, current_user: @current_user, socket: @socket

.container-fluid
  .row
    .col-3
      .container.bg-white.shadow-sm.p-2
        h6.text-center Please, be nice in chat
        div.list-group-item.p-0 style="height: 350px;"
          ul.overflow-auto.pt-2.px-2 style=("word-break: break-all; height: 80%; top: 5px;") phx-hook="NewChatMessage"
            div
              = for message <- @messages do
                div
                  span.font-weight-bold = "#{message.user_name}:"
                  span.ml-1 = message.message
          = form_for :message, "#", [phx_submit: :chat_message, class: "p-2 input-group input-group-sm position-absolute"],  fn f ->
            = text_input f, :content, placeholder: "write your message here...", class: "form-control border-secondary"
            .input-group-append
              = submit "Send", class: "btn btn-outline-secondary"
      .container.mt-2.bg-white.shadow-sm.p-2
        .d-flex.align-items-center
          h5.mb-0.mr-5 Participants
          = if is_waiting_partisipants?(@tournament) do
            = if is_participant?(@tournament, @current_user.id) do
              button.btn.btn-outline-danger[phx-click="leave"] Leave
            - else
              button.btn.btn-outline-info[phx-click="join"] Join
        = render "_players.html", players: players

    .col-9.bg-white.shadow-sm.py-4
      .d-flex.justify-content-around
        h4 1/8
        h4 1/4
        h4 1/2
        h4 Final
      .bracket
        .round
          = Enum.map first_round_left_range,  fn index ->
            .match
              .match__content.bg-light
                = render "_match.html", match:  Enum.at(matches, index), current_user: @current_user
        .round
          = Enum.map second_round_left_range,  fn index ->
            .match
              .match__content
                = render "_match.html", match:  Enum.at(matches, index), current_user: @current_user
        .round
          = Enum.map sm_final_range, fn index ->
            .match
              .match__content
                = render "_match.html", match:  Enum.at(matches, index), current_user: @current_user
        .round
          .match
            .match__content
              = render "_match.html", match:  Enum.at(matches, final), current_user: @current_user
